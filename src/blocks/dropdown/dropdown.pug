//- Parameters:
//- string     labelPrimary=''   - лейбл поля дропдауна (первичный)
//- string     labelSecondary='' - лейбл поля дропдауна (вторичный)
//- object     attrsField={}     - атрибуты поля дропдауна
//- string[]   words=[]          - общие обозначения для всех пунктов меню дропдауна:
//-                                - обозначение (в единственном числе)
//-                                - обозначение (когда последняя цифра общего количества входит в диапазон 2-4)
//-                                - обозначение (когда последняя цифра общего количества равна 0,
//-                                  либо последняя цифра общего количества входит в диапазон 5-9,
//-                                  либо последние две цифры общего количества входят в диапазон 10-19)
//- string[[]] list              - меню дропдауна, где каждый пункт (массив) содержит:
//-                                - текущее количество
//-                                - мин. допустимое количество
//-                                - макс. допустимое количество
//-                                - название пункта (в единственном числе)
//-                                - название пункта (во множественном числе)
//-                                - название пункта (когда последняя цифра количества входит в диапазон 2-4)
//-                                - название пункта (когда последняя цифра количества равна 0,
//-                                  либо последняя цифра количества входит в диапазон 5-9,
//-                                  либо последние две цифры количества входят в диапазон 10-19)
//- bool       isButtons=false   - если true, то у дропдауна доступны кнопки "Очистить" и "Применить"
//- string[]   modifiers=[]      - модификаторы блока

//- Examples:
//- +dropdown('Гости', '', {
//-   'placeholder': 'Сколько гостей',
//- }, ['гость', 'гостя', 'гостей'], [
//-   [0, 0, 3, 'взрослый', 'взрослые', 'взрослых', 'взрослых'],
//-   [0, 0, 2, 'ребёнок', 'дети', 'ребёнка', 'детей'],
//-   [0, 0, 1, 'младенец', 'младенцы', 'младенца', 'младенцев'],
//- ], true, ['expanded'])

include /blocks/button/button.pug
include /blocks/field/field.pug

mixin dropdown(labelPrimary='', labelSecondary='', attrsField={}, words=[], list, isButtons=false, modifiers=[])
  .dropdown(class=getModifiers('dropdown', modifiers))
    +field(labelPrimary, labelSecondary, ['dropdown'], Object.assign(attrsField, {
      'readonly': true,
      'data-words': (words.length !== 0) ? `${words[0]}, ${words[1]}, ${words[2]}` : false,
    }))
    ._content(style='--height: 100vh;')
      ul._list
        each item in list
          li._item(data-words=(item[3].length !== 0) ? `${item[3]}, ${item[5]}, ${item[6]}` : false)
            span._title
              | #{item[4]}
            span._controls
              button._spinner(type='button', name='decrement', disabled)
                | &minus;
              input._number(type='number', value=item[0], min=item[1], max=item[2], readonly)
              button._spinner(type='button', name='increment')
                | +
      if isButtons
        ._buttons
          ._button.-reset.-hidden
            +button('Очистить', ['bodyless', 'text-gray'], {
              'name': 'reset',
            })
          ._button
            +button('Применить', ['bodyless'], {
              'name': 'apply',
            })
